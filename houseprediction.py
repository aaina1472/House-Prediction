# -*- coding: utf-8 -*-
"""HousePrediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HmoyRhmml_9MdjDQWbtJAnMff2ORA-E_
"""

import pandas as pd

housing = pd.read_csv("Housing Data.csv")

housing.head()

housing.info()

housing['CHAS'].value_counts()

housing.describe()

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

import matplotlib.pyplot as plt
housing.hist(bins=50, figsize=(30,15))
plt.show()

"""# **Train**-**Test Split**"""

import numpy as np
def split_train_test(data, test_ratio):
    np.random.seed(42)
    shuffled_indices = np.random.permutation(len(data))
    test_set_size = int(len(data) * test_ratio)
    test_indices = shuffled_indices[:test_set_size]
    train_indices = shuffled_indices[test_set_size:]
    return data.iloc[train_indices], data.iloc[test_indices]

train_set, test_set = split_train_test(housing, 0.2)

train_set.shape

test_set.shape

"""# Train-Test Split using Model Selection"""

from sklearn.model_selection import train_test_split
train_set, test_set = train_test_split(housing, test_size=0.2, random_state=42)
train_set.shape

test_set.shape

train_set.info()

test_set.info()

"""## Shuffling"""

from sklearn.model_selection import StratifiedShuffleSplit

chas_mode = housing['CHAS'].mode()[0]
housing['CHAS'] = housing['CHAS'].fillna(chas_mode)


split = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)
for train_index, test_index in split.split(housing, housing['CHAS']):
    strat_train_set = housing.loc[train_index]
    strat_test_set  =  housing.loc[test_index]

housing = strat_train_set.copy()

housing.describe() #before filling missing values

# You can verify the splits
print("Stratified Train Set Shape:", strat_train_set.shape)
print("Stratified Test Set Shape:", strat_test_set.shape)
print("CHAS value counts in Stratified Train Set:\n", strat_train_set['CHAS'].value_counts())
print("CHAS value counts in Stratified Test Set:\n", strat_test_set['CHAS'].value_counts())

"""## Looking for Correlations"""

corr_matrix = housing.corr()
corr_matrix['MEDV'].sort_values(ascending=False)

housing.info()

"""# Feature Selection"""

housing = strat_train_set.drop("MEDV", axis=1)
housing_labels = strat_train_set["MEDV"].copy()
housing_labels

"""Preprocessing"""

from sklearn.impute import SimpleImputer
imputer = SimpleImputer(strategy="median")
housing_num = housing.drop("CHAS", axis=1)
imputer.fit(housing_num)
print(imputer.statistics_)

imputer.statistics_.shape

x = imputer.transform(housing_num)

housing_tr = pd.DataFrame(x, columns=housing_num.columns)

housing_tr.describe()

"""# **Feature** **Scaling**

1.   Min-max Scaling (Normalization)= Sklearn
     provied MinMaxScalar for this.
2.   Standardization= Sklearn provied StandardScalar for this
"""

from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
my_pipeline = Pipeline([
    ('imputer', SimpleImputer(strategy="median")),
    #     ..... add as many as you want in your pipeline
    ('std_scaler', StandardScaler()),
])

housing_num_tr = my_pipeline.fit_transform(housing)
housing_num_tr.shape

"""# Selection of Model"""

from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor

model = LinearRegression()
model.fit(housing_num_tr, housing_labels)

some_data = housing.iloc[:5]
some_data     # asli cleaned data through pipeline

some_labels = housing_labels.iloc[:5]
list(some_labels)       #asli prediction

prepared_data = my_pipeline.transform(some_data)
prepared_data

model.predict(prepared_data)

"""# Evaluation Model"""

from sklearn.metrics import mean_squared_error
housing_predictions = model.predict(housing_num_tr)
mse = mean_squared_error(housing_labels, housing_predictions)
rmse = np.sqrt(mse)
error = np.sqrt(mse)
print("Error is :", error)

print(rmse)

from sklearn.model_selection import cross_val_score
scores = cross_val_score(model, housing_num_tr, housing_labels, scoring="neg_mean_squared_error", cv=10)
rmse_scores = np.sqrt(-scores)
print(rmse_scores)

from sklearn.metrics import r2_score

# Calculate the R2 score
r2 = r2_score(housing_labels, housing_predictions)
print("R2 score:", r2)

"""## Error by Decision Tree"""

model = DecisionTreeRegressor()
model.fit(housing_num_tr, housing_labels)

some_data = housing.iloc[:5]
some_data     # asli cleaned data through pipeline

some_labels = housing_labels.iloc[:5]
list(some_labels)       #asli prediction

prepared_data = my_pipeline.transform(some_data)
model.predict(prepared_data)

"""Evaluation of Model by Decision Tree"""

from sklearn.metrics import mean_squared_error
housing_predictions = model.predict(housing_num_tr)
mse = mean_squared_error(housing_labels, housing_predictions)
rmse = np.sqrt(mse)
error = np.sqrt(mse)
print("Error is :", error)

print(rmse)

from sklearn.model_selection import cross_val_score
scores = cross_val_score(model, housing_num_tr, housing_labels, scoring="neg_mean_squared_error", cv=10)
rmse_scores = np.sqrt(-scores)
print(rmse_scores)

from sklearn.metrics import r2_score

# Calculate the R2 score
r2 = r2_score(housing_labels, housing_predictions)
print("R2 score:", r2)

"""# Saving the model"""

from joblib import dump, load
dump(model, 'Dragon.joblib')

"""# Testing the Model"""

x_test = strat_test_set.drop("MEDV", axis=1)
y_test = strat_test_set["MEDV"].copy()
x_test_prepared = my_pipeline.transform(x_test)

imputer_y = SimpleImputer(strategy="median")
y_test_imputed = imputer_y.fit_transform(y_test.values.reshape(-1, 1)).flatten()

final_predictions = model.predict(x_test_prepared)
final_mse = mean_squared_error(y_test_imputed, final_predictions)
final_rmse = np.sqrt(final_mse)

final_mse

final_rmse

print(final_predictions)

print(list(y_test))

prepared_data[0]